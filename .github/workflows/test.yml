name: SONIVA Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 (Black default)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test code structure
      run: |
        # Test that main.py can be imported without errors
        python -c "import main; print('✓ main.py imports successfully')"
    
    - name: Test argument parsing
      run: |
        # Test help command
        python main.py --help
    
    - name: Create sample data for testing
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        
        # Create synthetic data for testing
        np.random.seed(42)
        n_samples = 100
        n_features = 50
        
        # Generate features
        X = np.random.randn(n_samples, n_features)
        
        # Generate labels and IDs
        labels = ['Control'] * 50 + ['Patient'] * 50
        ids = [f'S{i:03d}' for i in range(1, 26)] * 2 + [f'S{i:03d}' for i in range(26, 51)] * 2
        
        # Create DataFrame
        df = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(n_features)])
        df['ID'] = ids
        df['Label'] = labels
        
        # Save to Excel
        df.to_excel('test_data.xlsx', index=False)
        print('✓ Test data created')
        "
    
    - name: Test SVM model
      run: |
        timeout 300 python main.py --data_path test_data.xlsx --model SVM --cv_folds 3
    
    - name: Test Random Forest model  
      run: |
        timeout 300 python main.py --data_path test_data.xlsx --model RF --cv_folds 3
    
    - name: Test Neural Network model
      run: |
        timeout 600 python main.py --data_path test_data.xlsx --model NN --cv_folds 3
    
    - name: Test output directory creation
      run: |
        python main.py --data_path test_data.xlsx --model SVM --cv_folds 3 --output_dir test_output
        ls -la test_output/
        
    - name: Cleanup
      run: |
        rm -f test_data.xlsx
        rm -rf test_output/
        rm -rf results/
